# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AuthChangePasswordInput {
  currentPassword: String!
  newPassword: String!
}

input AuthGenerateRecoveryCodeInput {
  email: String!
}

input AuthRecoverPasswordInput {
  code: String!
  email: String!
  password: String!
}

input AuthSignInInput {
  email: String!
  password: String!
}

type AuthSignInResponse {
  accessToken: String!
  refreshToken: String!
  userId: String!
}

input AuthSignUpInput {
  email: String!
  fullName: String!
  nickname: String!
  password: String!
}

type Coordinate {
  latitude: Float!
  longitude: Float!
}

input CoordinateCreateInput {
  latitude: Float!
  longitude: Float!
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

enum ErrorCode {
  AUTH_ERROR
  FEATURE_TOGGLE_ERROR
  FORBIDDEN_ERROR
  NOT_FOUND_ERROR
  UNKNOWN_ERROR
  VALIDATION_ERROR
}

enum ErrorDescription {
  EMAIL_NOT_AVAILABLE
  EMAIL_NOT_FOUND
  PARTY_NAME_NOT_AVAILABLE
  PASSWORD_INVALID
  SIGN_IN_INVALID
  USER_NAME_NOT_AVAILABLE
}

type FeatureToggle {
  _id: String!
  name: FeatureToggleName!
  value: Boolean!
}

input FeatureToggleChangeValueInput {
  name: FeatureToggleName!
  value: Boolean!
}

enum FeatureToggleName {
  MAILING
  NOTIFICATION_GET
  PARTY_CREATE
  PARTY_DELETE
  PARTY_GET
  PARTY_SEARCH_ATTENDERS
  SIGN_UP
  USER_CHANGE_ATTENDING_STATE
  USER_CHANGE_FOLLOWING_STATE
  USER_DELETE
  USER_EDIT
  USER_GET
  USER_GET_ATTENDED_PARTIES
  USER_GET_FOLLOWERS
  USER_GET_FOLLOWING
  USER_SEARCH_FOLLOWERS_TO_INVITE
  USER_SEND_PARTY_INVITE
  USER_SHARE
}

input FeatureTogglePopulateInput {
  value: Boolean
}

type Mutation {
  appInfoChangeMinVersion(version: String!): Boolean!
  appInfoInitialize: Boolean!
  changePassword(data: AuthChangePasswordInput!): Boolean!
  featureToggleChangeValue(data: FeatureToggleChangeValueInput!): Boolean!
  featureToggleSync(data: FeatureTogglePopulateInput!): Boolean!
  generateRecoveryCode(data: AuthGenerateRecoveryCodeInput!): Boolean!
  partyCreate(data: PartyCreateInput!): String!
  partyDelete(id: String!): Boolean!
  partyEnable(id: String!): Boolean!
  recoverPassword(data: AuthRecoverPasswordInput!): Boolean!
  signIn(data: AuthSignInInput!): AuthSignInResponse!
  signUp(data: AuthSignUpInput!): AuthSignInResponse!
  supportSendMessage(data: SupportSendMessageInput!): Boolean!
  userChangeAttendingState(data: UserChangeAttendingStateInput!): Boolean!
  userChangeFollowingState(data: UserChangeFollowingStateInput!): Boolean!
  userDelete(data: UserDeleteInput!): Boolean!
  userEdit(data: UserEditInput!): Boolean!
  userSendPartyInvite(data: UserSendPartyInviteInput!): Boolean!
}

type Notification {
  _id: String!
  createdAt: DateTime!
  from: User!
  party: Party
  type: NotificationType!
  updatedAt: DateTime
  user: User!
}

enum NotificationType {
  FOLLOW
  INVITE
}

type Party {
  _id: String!
  address: String!
  allowInvites: Boolean!
  attenders: [User!]!
  attendersCount: Float!
  availability: PartyAvailability!
  coordinate: Coordinate!
  createdAt: DateTime!
  date: Date!
  description: String!
  invited: [User!]!
  name: String!
  openBar: Boolean!
  organizer: User
  status: PartyStatus!
  updatedAt: DateTime
}

enum PartyAvailability {
  FOLLOWERS
  FOLLOWING
  PRIVATE
  PUBLIC
}

input PartyCreateInput {
  address: String!
  allowInvites: Boolean!
  availability: PartyAvailability!
  coordinate: CoordinateCreateInput!
  date: Date!
  description: String!
  name: String!
  openBar: Boolean!
}

type PartyGetByIdResponse {
  _id: String!
  address: String!
  allowInvites: Boolean!
  attenders: [User!]!
  attendersCount: Float!
  availability: PartyAvailability!
  date: Date!
  description: String!
  isAttender: Boolean!
  isOrganizer: Boolean!
  name: String!
  openBar: Boolean!
  organizer: User
  status: PartyStatus!
}

type PartyMapPreview {
  _id: String!
  coordinate: Coordinate!
  date: Date!
  name: String!
  organizerNickname: String
}

type PartyPreview {
  _id: String!
  name: String!
  organizerNickname: String
}

input PartySearchAttendersInput {
  id: String!
  q: String
}

enum PartyStatus {
  CREATED
  ENABLED
  EXPIRED
}

type Query {
  appInfoMeetMinVersion(version: String!): Boolean!
  featureToggleGetEnabledNames: [FeatureToggleName!]!
  featureToggleList: [FeatureToggle!]!
  notificationsGetByUserId: [UserNotification!]!
  partyFind: [PartyMapPreview!]!
  partyGetById(id: String!): PartyGetByIdResponse!
  partySearch(q: String): [PartyPreview!]!
  partySearchAttenders(data: PartySearchAttendersInput!): [UserPreview!]!
  typesSync: TypesSyncResponse!
  userCheckPartyValidating: Boolean!
  userGet(data: UserGetInput!): UserGetResponse!
  userGetAttendedPartiesById(id: String!): [PartyPreview!]!
  userGetFollowersById(id: String!): [UserPreview!]!
  userGetFollowingById(id: String!): [UserPreview!]!
  userSearch(q: String): [UserPreview!]!
  userSearchFollowersToInvite(data: UserSearchFollowersToInviteInput!): [User!]!
}

input SupportSendMessageInput {
  body: String!
  subject: String!
}

type TypesSyncResponse {
  code: ErrorCode!
  description: ErrorDescription!
}

type User {
  _id: String!
  attendedParties: [Party!]!
  attendedPartiesCount: Float!
  bio: String
  createdAt: DateTime!
  email: String!
  followers: [User!]!
  followersCount: Float!
  following: [User!]!
  followingCount: Float!
  fullName: String!
  instagramUsername: String
  invites: [Party!]!
  nickname: String!
  notifications: [Notification!]!
  password: String
  recoveryCode: String
  refreshToken: String
  updatedAt: DateTime
}

input UserChangeAttendingStateInput {
  partyId: String!
  state: Boolean!
}

input UserChangeFollowingStateInput {
  followingId: String!
  state: Boolean!
}

input UserDeleteInput {
  password: String!
}

input UserEditInput {
  fullName: String!
  instagramUsername: String
  nickname: String!
}

input UserGetInput {
  id: String
  nickname: String
}

type UserGetResponse {
  _id: String!
  attendedPartiesCount: Float!
  followersCount: Float!
  followingCount: Float!
  fullName: String!
  instagramUsername: String
  isFollower: Boolean!
  isFollowing: Boolean!
  nickname: String!
}

type UserNotification {
  _id: String!
  createdAt: DateTime!
  from: UserPreview!
  party: PartyPreview
  type: NotificationType!
  url: String
}

type UserPreview {
  _id: String!
  fullName: String
  nickname: String!
}

input UserSearchFollowersToInviteInput {
  partyId: String!
  q: String
}

input UserSendPartyInviteInput {
  invitedId: [String!]!
  partyId: String!
}